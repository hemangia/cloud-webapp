name: Packer Build

on:
  push:
    branches: [main]

jobs:
  packagebuild:
    runs-on: ubuntu-latest
    if: github.event_name != 'push' || (github.event_name == 'push' && github.repository == 'csye6225-Hemangi/webapp')
    steps:
      - uses: actions/checkout@v2
        with:
          clean: false

      - name: Set up JDK 17

        uses: actions/setup-java@v2

        with:
          java-version: "17"

          distribution: "temurin"

          cache: maven

      - name: Build with Maven (skip tests)
        run: mvn clean install -DskipTests
        working-directory: demo

      - name: Create target directory
        run: mkdir -p demo/staging
        working-directory: demo

      - name: Package with Maven
        run: |
          pwd
          ls
          mvn -B package --file pom.xml -DskipTests
          cp /home/runner/work/webapp/webapp/demo/cloudwatch-config.json demo/staging/
        working-directory: demo

      - name: Upload jar file
        uses: actions/upload-artifact@v2
        with:
          name: webapp-artifact
          path: demo/target

      - name: Testing
        run: |
          pwd
          ls -al

      - name: Run `packer init`
        id: init
        working-directory: demo
        run: "packer init ami.pkr.hcl"

      - name: Validate Packer Template
        uses: hashicorp/packer-github-actions@master
        with:
          command: validate
          target: demo/ami.pkr.hcl
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
          working-directory: demo

      - name: Download jar file
        uses: actions/download-artifact@v2
        with:
          name: webapp-artifact

      - name: Packer build
        uses: hashicorp/packer-github-actions@master
        with:
          command: build
          working-directory: demo
          target: demo/ami.pkr.hcl
        env:
          PACKER_LOG: 1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
          AWS_DEFAULT_REGION: us-west-2

      - name: Create new Launch Template version and refresh instances
        run: |
          latestAmi=$(aws ec2 describe-images --filters "Name=owner-id,Values=286957373320" --query "sort_by(Images, &CreationDate)[-1].[ImageId]" --output "text")
          echo "latest ami:"
          echo $latestAmi
          latestLaunchTemplateId=$(aws ec2 describe-launch-templates --query "sort_by(LaunchTemplates, &CreateTime)[-1].[LaunchTemplateId]" --output "text")
          if [[ ${latestLaunchTemplateId} != 'None' ]]; then
            echo "latest template id:"
            echo $latestLaunchTemplateId
            latestAutoScalingGroupName=$(aws autoscaling describe-auto-scaling-groups --query "sort_by(AutoScalingGroups, &CreatedTime)[-1].[AutoScalingGroupName]" --output "text")
            echo "latest AutoScalingGroupName:"
            echo $latestAutoScalingGroupName
            aws autoscaling update-auto-scaling-group --auto-scaling-group-name  $latestAutoScalingGroupName --launch-template LaunchTemplateId=$latestLaunchTemplateId,Version='$Latest'
            latestVersion=$(aws ec2 describe-launch-templates --launch-template-id $latestLaunchTemplateId --query "sort_by(LaunchTemplates, &CreateTime)[-1].[LatestVersionNumber]" --output "text")
            echo "latestVersion:"
            echo $latestVersion
            aws ec2 create-launch-template-version --launch-template-id $latestLaunchTemplateId --version-description latest --source-version 1 --launch-template-data "ImageId=$latestAmi"
            aws autoscaling start-instance-refresh --auto-scaling-group-name $latestAutoScalingGroupName
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
          AWS_DEFAULT_REGION: us-west-2

      - name: Wait for Instance Refresh to Complete
        run: |
          while true; do
            refresh_status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name $latestAutoScalingGroupName --query 'InstanceRefreshes[-1].Status' --output text)
            if [ "$refresh_status" == "Successful" ]; then
              break
            elif [ "$refresh_status" == "Failed" ]; then
              echo "Instance refresh failed."
              exit 1
            else
              sleep 60
            fi
          done
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
          AWS_DEFAULT_REGION: us-west-2
